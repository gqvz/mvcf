/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreatePaymentRequest,
  CreatePaymentResponse,
  EditPaymentStatusRequest,
  GetPaymentResponse
} from '../models/index';
import {
  CreatePaymentRequestToJSON,
  CreatePaymentResponseFromJSON,
  EditPaymentStatusRequestToJSON,
  GetPaymentResponseFromJSON
} from '../models/index';

export interface CreatePaymentOperationRequest {
  request: CreatePaymentRequest;
}

export interface EditPaymentStatusOperationRequest {
  id: number;
  request: EditPaymentStatusRequest;
}

export interface GetPaymentByIdRequest {
  id: number;
}

export interface GetPaymentsRequest {
  status?: string;
  limit?: number;
  offset?: number;
  userId?: number;
}

/**
 *
 */
export class PaymentsApi extends runtime.BaseAPI {
  /**
   * Create a new payment
   * Create a new payment
   */
  async createPaymentRaw(
    requestParameters: CreatePaymentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreatePaymentResponse>> {
    if (requestParameters['request'] == null) {
      throw new runtime.RequiredError(
        'request',
        'Required parameter "request" was null or undefined when calling createPayment().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/payments`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreatePaymentRequestToJSON(requestParameters['request'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreatePaymentResponseFromJSON(jsonValue));
  }

  /**
   * Create a new payment
   * Create a new payment
   */
  async createPayment(
    requestParameters: CreatePaymentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreatePaymentResponse> {
    const response = await this.createPaymentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Edit payment status
   * Edit payment status
   */
  async editPaymentStatusRaw(
    requestParameters: EditPaymentStatusOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling editPaymentStatus().'
      );
    }

    if (requestParameters['request'] == null) {
      throw new runtime.RequiredError(
        'request',
        'Required parameter "request" was null or undefined when calling editPaymentStatus().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/payments/{id}`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: EditPaymentStatusRequestToJSON(requestParameters['request'])
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Edit payment status
   * Edit payment status
   */
  async editPaymentStatus(
    requestParameters: EditPaymentStatusOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.editPaymentStatusRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a payment by ID
   * Get a payment by ID
   */
  async getPaymentByIdRaw(
    requestParameters: GetPaymentByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetPaymentResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getPaymentById().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/payments/{id}`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentResponseFromJSON(jsonValue));
  }

  /**
   * Get a payment by ID
   * Get a payment by ID
   */
  async getPaymentById(
    requestParameters: GetPaymentByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetPaymentResponse> {
    const response = await this.getPaymentByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all payments with filters
   * Get payments
   */
  async getPaymentsRaw(
    requestParameters: GetPaymentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GetPaymentResponse>>> {
    const queryParameters: any = {};

    if (requestParameters['status'] != null) {
      queryParameters['status'] = requestParameters['status'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['user_id'] = requestParameters['userId'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/payments`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetPaymentResponseFromJSON));
  }

  /**
   * Get all payments with filters
   * Get payments
   */
  async getPayments(
    requestParameters: GetPaymentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GetPaymentResponse>> {
    const response = await this.getPaymentsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
