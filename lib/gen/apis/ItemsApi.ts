/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateItemRequest,
  CreateItemResponse,
  EditItemRequest,
  GetItemResponse,
} from '../models/index';
import {
    CreateItemRequestFromJSON,
    CreateItemRequestToJSON,
    CreateItemResponseFromJSON,
    CreateItemResponseToJSON,
    EditItemRequestFromJSON,
    EditItemRequestToJSON,
    GetItemResponseFromJSON,
    GetItemResponseToJSON,
} from '../models/index';

export interface CreateItemOperationRequest {
    item: CreateItemRequest;
}

export interface EditItemOperationRequest {
    id: number;
    item: EditItemRequest;
}

export interface GetItemByIdRequest {
    id: number;
}

export interface GetItemsRequest {
    tags?: string;
    search?: string;
    available?: boolean;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     * Create a new item
     * Create item
     */
    async createItemRaw(requestParameters: CreateItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateItemResponse>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling createItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateItemRequestToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateItemResponseFromJSON(jsonValue));
    }

    /**
     * Create a new item
     * Create item
     */
    async createItem(requestParameters: CreateItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateItemResponse> {
        const response = await this.createItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing item
     * Edit item
     */
    async editItemRaw(requestParameters: EditItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editItem().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling editItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditItemRequestToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing item
     * Edit item
     */
    async editItem(requestParameters: EditItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editItemRaw(requestParameters, initOverrides);
    }

    /**
     * Get an item by its ID
     * Get item by ID
     */
    async getItemByIdRaw(requestParameters: GetItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getItemById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemResponseFromJSON(jsonValue));
    }

    /**
     * Get an item by its ID
     * Get item by ID
     */
    async getItemById(requestParameters: GetItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemResponse> {
        const response = await this.getItemByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items with optional filters
     * Get items
     */
    async getItemsRaw(requestParameters: GetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['available'] != null) {
            queryParameters['available'] = requestParameters['available'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemResponseFromJSON));
    }

    /**
     * Get all items with optional filters
     * Get items
     */
    async getItems(requestParameters: GetItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemResponse>> {
        const response = await this.getItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
