/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderItemRequest,
  CreateOrderItemResponse,
  EditOrderItemStatusRequest,
  GetOrderItemResponse,
} from '../models/index';
import {
    CreateOrderItemRequestFromJSON,
    CreateOrderItemRequestToJSON,
    CreateOrderItemResponseFromJSON,
    CreateOrderItemResponseToJSON,
    EditOrderItemStatusRequestFromJSON,
    EditOrderItemStatusRequestToJSON,
    GetOrderItemResponseFromJSON,
    GetOrderItemResponseToJSON,
} from '../models/index';

export interface CreateOrderItemOperationRequest {
    id: number;
    request: CreateOrderItemRequest;
}

export interface EditOrderItemStatusOperationRequest {
    id: number;
    status: EditOrderItemStatusRequest;
}

export interface GetOrderItemsRequest {
    id: number;
}

export interface GetOrderItemsByStatusRequest {
    limit?: number;
    offset?: number;
    status?: string;
}

/**
 * 
 */
export class OrderItemsApi extends runtime.BaseAPI {

    /**
     * Create a new order item
     * Create a new order item
     */
    async createOrderItemRaw(requestParameters: CreateOrderItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrderItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createOrderItem().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling createOrderItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/orders/{id}/items`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderItemRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrderItemResponseFromJSON(jsonValue));
    }

    /**
     * Create a new order item
     * Create a new order item
     */
    async createOrderItem(requestParameters: CreateOrderItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrderItemResponse> {
        const response = await this.createOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the status of an order item
     * Edit an order item status
     */
    async editOrderItemStatusRaw(requestParameters: EditOrderItemStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editOrderItemStatus().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling editOrderItemStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/orders/items/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditOrderItemStatusRequestToJSON(requestParameters['status']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Edit the status of an order item
     * Edit an order item status
     */
    async editOrderItemStatus(requestParameters: EditOrderItemStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.editOrderItemStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items in an order
     * Get order items
     */
    async getOrderItemsRaw(requestParameters: GetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetOrderItemResponse>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrderItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/orders/{id}/items`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetOrderItemResponseFromJSON));
    }

    /**
     * Get all items in an order
     * Get order items
     */
    async getOrderItems(requestParameters: GetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetOrderItemResponse>> {
        const response = await this.getOrderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items in an order by status
     * Get order items by status
     */
    async getOrderItemsByStatusRaw(requestParameters: GetOrderItemsByStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetOrderItemResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/orders/items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetOrderItemResponseFromJSON));
    }

    /**
     * Get all items in an order by status
     * Get order items by status
     */
    async getOrderItemsByStatus(requestParameters: GetOrderItemsByStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetOrderItemResponse>> {
        const response = await this.getOrderItemsByStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
