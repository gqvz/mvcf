/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateOrderRequest, CreateOrderResponse, GetOrderResponse } from '../models/index';
import { CreateOrderRequestToJSON, CreateOrderResponseFromJSON, GetOrderResponseFromJSON } from '../models/index';

export interface CloseOrderByIdRequest {
  id: number;
}

export interface CreateOrderOperationRequest {
  request: CreateOrderRequest;
}

export interface GetOrderByIdRequest {
  id: number;
}

export interface GetOrdersRequest {
  tableNumber?: number;
  date?: string;
  userId?: number;
  status?: string;
  limit?: number;
  offset?: number;
}

/**
 *
 */
export class OrdersApi extends runtime.BaseAPI {
  /**
   * Close an order by ID
   * Close an order
   */
  async closeOrderByIdRaw(
    requestParameters: CloseOrderByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling closeOrderById().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/orders/{id}/close`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Close an order by ID
   * Close an order
   */
  async closeOrderById(
    requestParameters: CloseOrderByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.closeOrderByIdRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new order
   * Create a new order
   */
  async createOrderRaw(
    requestParameters: CreateOrderOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateOrderResponse>> {
    if (requestParameters['request'] == null) {
      throw new runtime.RequiredError(
        'request',
        'Required parameter "request" was null or undefined when calling createOrder().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/orders`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateOrderRequestToJSON(requestParameters['request'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrderResponseFromJSON(jsonValue));
  }

  /**
   * Create a new order
   * Create a new order
   */
  async createOrder(
    requestParameters: CreateOrderOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateOrderResponse> {
    const response = await this.createOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get an order by its ID
   * Get order by ID
   */
  async getOrderByIdRaw(
    requestParameters: GetOrderByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetOrderResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getOrderById().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/orders/{id}`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetOrderResponseFromJSON(jsonValue));
  }

  /**
   * Get an order by its ID
   * Get order by ID
   */
  async getOrderById(
    requestParameters: GetOrderByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetOrderResponse> {
    const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get order filtered by table number, date, user, status
   * Get orders
   */
  async getOrdersRaw(
    requestParameters: GetOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GetOrderResponse>>> {
    const queryParameters: any = {};

    if (requestParameters['tableNumber'] != null) {
      queryParameters['table_number'] = requestParameters['tableNumber'];
    }

    if (requestParameters['date'] != null) {
      queryParameters['date'] = requestParameters['date'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['user_id'] = requestParameters['userId'];
    }

    if (requestParameters['status'] != null) {
      queryParameters['status'] = requestParameters['status'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/orders`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetOrderResponseFromJSON));
  }

  /**
   * Get order filtered by table number, date, user, status
   * Get orders
   */
  async getOrders(
    requestParameters: GetOrdersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GetOrderResponse>> {
    const response = await this.getOrdersRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
