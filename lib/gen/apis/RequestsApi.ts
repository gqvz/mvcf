/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateRequestRequest, GetRequestResponse } from '../models/index';
import { CreateRequestRequestToJSON, GetRequestResponseFromJSON } from '../models/index';

export interface CreateRequestOperationRequest {
  request: CreateRequestRequest;
}

export interface GetRequestsRequest {
  user?: number;
  role?: string;
  status?: string;
  limit?: number;
  offset?: number;
}

export interface GrantRequestRequest {
  id: number;
}

export interface MarkRequestSeenRequest {
  id: number;
}

export interface RejectRequestRequest {
  id: number;
}

/**
 *
 */
export class RequestsApi extends runtime.BaseAPI {
  /**
   * Create a new request for a role
   * Create request
   */
  async createRequestRaw(
    requestParameters: CreateRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['request'] == null) {
      throw new runtime.RequiredError(
        'request',
        'Required parameter "request" was null or undefined when calling createRequest().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/requests`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateRequestRequestToJSON(requestParameters['request'])
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a new request for a role
   * Create request
   */
  async createRequest(
    requestParameters: CreateRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.createRequestRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get requests filtered by user, role, status
   * Get requests
   */
  async getRequestsRaw(
    requestParameters: GetRequestsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GetRequestResponse>>> {
    const queryParameters: any = {};

    if (requestParameters['user'] != null) {
      queryParameters['user'] = requestParameters['user'];
    }

    if (requestParameters['role'] != null) {
      queryParameters['role'] = requestParameters['role'];
    }

    if (requestParameters['status'] != null) {
      queryParameters['status'] = requestParameters['status'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/requests`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetRequestResponseFromJSON));
  }

  /**
   * Get requests filtered by user, role, status
   * Get requests
   */
  async getRequests(
    requestParameters: GetRequestsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GetRequestResponse>> {
    const response = await this.getRequestsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Grant a request for a role
   * Grant Request
   */
  async grantRequestRaw(
    requestParameters: GrantRequestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling grantRequest().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/requests/{id}/grant`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Grant a request for a role
   * Grant Request
   */
  async grantRequest(
    requestParameters: GrantRequestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.grantRequestRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Mark a request as seen by the user
   * Mark Request as Seen
   */
  async markRequestSeenRaw(
    requestParameters: MarkRequestSeenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling markRequestSeen().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/requests/{id}/seen`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Mark a request as seen by the user
   * Mark Request as Seen
   */
  async markRequestSeen(
    requestParameters: MarkRequestSeenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.markRequestSeenRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Reject a request for a role
   * Reject Request
   */
  async rejectRequestRaw(
    requestParameters: RejectRequestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling rejectRequest().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey('Authorization'); // jwt authentication
    }

    let urlPath = `/requests/{id}/reject`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Reject a request for a role
   * Reject Request
   */
  async rejectRequest(
    requestParameters: RejectRequestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.rejectRequestRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
