/* tslint:disable */
/* eslint-disable */
/**
 * MVC
 * MVC Assignment
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTagRequest,
  CreateTagResponse,
  EditTagRequest,
  EditTagResponse,
  GetTagResponse,
} from '../models/index';
import {
    CreateTagRequestFromJSON,
    CreateTagRequestToJSON,
    CreateTagResponseFromJSON,
    CreateTagResponseToJSON,
    EditTagRequestFromJSON,
    EditTagRequestToJSON,
    EditTagResponseFromJSON,
    EditTagResponseToJSON,
    GetTagResponseFromJSON,
    GetTagResponseToJSON,
} from '../models/index';

export interface CreateTagOperationRequest {
    tag: CreateTagRequest;
}

export interface EditTagOperationRequest {
    id: number;
    tag: EditTagRequest;
}

export interface GetTagByIdRequest {
    id: number;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Create a new tag
     * Create tag
     */
    async createTagRaw(requestParameters: CreateTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTagResponse>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling createTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTagRequestToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTagResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tag
     * Create tag
     */
    async createTag(requestParameters: CreateTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTagResponse> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing tag
     * Edit tag
     */
    async editTagRaw(requestParameters: EditTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditTagResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editTag().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling editTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/tags/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditTagRequestToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditTagResponseFromJSON(jsonValue));
    }

    /**
     * Edit an existing tag
     * Edit tag
     */
    async editTag(requestParameters: EditTagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditTagResponse> {
        const response = await this.editTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a tag by its ID
     * Get tag by ID
     */
    async getTagByIdRaw(requestParameters: GetTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTagResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTagById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/tags/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTagResponseFromJSON(jsonValue));
    }

    /**
     * Get a tag by its ID
     * Get tag by ID
     */
    async getTagById(requestParameters: GetTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTagResponse> {
        const response = await this.getTagByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tags
     * Get tags
     */
    async getTagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTagResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // jwt authentication
        }


        let urlPath = `/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTagResponseFromJSON));
    }

    /**
     * Get all tags
     * Get tags
     */
    async getTags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTagResponse>> {
        const response = await this.getTagsRaw(initOverrides);
        return await response.value();
    }

}
